import { Intersection, Object3D, Object3DEventMap } from 'three';
import { TresObject } from 'src/types';
import { TresContext } from '../useTresContextProvider';

type CallbackFn = (intersection: Intersection<Object3D<Object3DEventMap>>, event: PointerEvent) => void;
type CallbackFnPointerLeave = (object: Object3D, event: PointerEvent) => void;
export interface EventProps {
    onClick?: CallbackFn;
    onPointerEnter?: CallbackFn;
    onPointerMove?: CallbackFn;
    onPointerLeave?: CallbackFnPointerLeave;
}
export declare const usePointerEventHandler: (ctx: TresContext) => {
    registerObject: (object: TresObject & EventProps) => void;
    deregisterObject: (object: TresObject) => void;
    registerBlockingObject: (object: TresObject) => void;
    deregisterBlockingObject: (object: TresObject) => void;
};
export {};
